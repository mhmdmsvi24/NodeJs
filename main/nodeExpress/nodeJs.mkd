# Node Js Tutorial Documentation:

## Node.js:

Node js is javascript runtime mostly used in server side, in node.js we don'e have access to browser API's
like DOM, window but on the other hand we have file system, operating system, network requests, etc.

## Versions:

we can build our node.js app on any version and any update may break our app also it's running on commonJS module.

`node -v` command gives us current version in cmd

we can instal nvm to update/remove node versions

Node.js versions are typically two type, LTS and current, LTS (long-term support) is suggested cause
of better stability.

## Node output:

we can use REPL and CLI for running node.js, the REPL
is typically for playing around and CLI is for real
time applications.

`node` command for REPL

`node <fileName>` for running code

## Node.js Globals:

- In node.js envirnoment we does not have any window
  object instead it's called **Global**.
- `__dirname`: path to current directory
- `__filename`: file name
- `require`: function to use modules
- `module`: info about current module(file)
- `process`: info about env where program is being executed, so we can make decisions based on env

## Modules:

- Node uses CommonJs under the hood
- CommonJs: every file is module (by default)
- Modules: Encapsulated Code (only shares minimum)

### using modules:

for exporting a module we use `module.exports = {}`
then inside out main app we can access them by
initializing to a variable with `const greet = require(path)`.

we can export using a single item instead of objects
but with objects we can export multiple things.

for multiple exports we can use object destructuring
for initializing them: `const {john, peter} = require(path)`

we can also include files without exporting simply with
adding them in a single `require()` function without any
assignment to any variable imagine we have a function in
a `<myFile>` so we can write `require(./myFile)` so we'll
calling it globally so it'll invoked and it's not
recomended.

### Built-in Modules:

There are some prebuilt modules that we can use for our
benefit, we can access them in nodejs.org/docs also keep
in mind built-in modules doesn't need installation
- OS, PATH - FS - HTTP